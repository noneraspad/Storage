import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Определение функции
def objective_function(x1, x2):
    return (x1 - 2)**2 + (x2 - 1)**2

# Определение функциональных ограничений
def constraint1(x1, x2):
    return x1 - 2*x2 + 1

def constraint2(x1, x2):
    return -0.25*x1**2 - x2**2 + 1

# Создание сетки
x1_min, x1_max = -1, 4
x2_min, x2_max = -1, 4
delta = 0.5
x1_values = np.arange(x1_min, x1_max + delta, delta)
x2_values = np.arange(x2_min, x2_max + delta, delta)
x1_grid, x2_grid = np.meshgrid(x1_values, x2_values)

# Вычисление значений функции на сетке
objective_values = objective_function(x1_grid, x2_grid)

# Построение 3D модели
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(x1_grid, x2_grid, objective_values, cmap='viridis', alpha=0.7)

# Построение линий уровней функции
plt.contour(x1_grid, x2_grid, objective_values, levels=20, cmap='viridis')

# Построение области допустимых решений
x1_feasible = np.linspace(x1_min, x1_max, 100)
x2_feasible1 = (x1_feasible + 1) / 2
x2_feasible2 = np.sqrt(1 - 0.25*x1_feasible**2)
plt.fill_between(x1_feasible, x2_feasible1, x2_feasible2, color='gray', alpha=0.5, label='Feasible Region')

# Установка метки минимума функции
min_point = np.array([2, 1, objective_function(2, 1)])
ax.scatter(*min_point, color='red', s=50, label='Minimum')

# Настройка графика
ax.set_xlabel('X1')
ax.set_ylabel('X2')
ax.set_zlabel('Objective Function')
ax.legend()
plt.title('Objective Function and Feasible Region')
plt.show()
