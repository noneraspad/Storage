import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Определение функции
def objective_function(x1, x2):
    return (x1 - 2)**2 + (x2 - 1)**2

# Определение функциональных ограничений
def constraint1(x1, x2):
    return x1 - 2*x2 + 1

def constraint2(x1, x2):
    return -0.25*x1**2 - x2**2 + 1

# Задание области поиска
x1_min, x1_max = -1, 4
x2_min, x2_max = -1, 4
delta = 0.5

# Создание сетки
x1_values = np.arange(x1_min, x1_max + delta, delta)
x2_values = np.arange(x2_min, x2_max + delta, delta)
x1_grid, x2_grid = np.meshgrid(x1_values, x2_values)

# Вычисление значений функции на сетке
objective_values = objective_function(x1_grid, x2_grid)

# Построение 3D модели
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')

# Построение поверхности и линий уровней
ax.plot_surface(x1_grid, x2_grid, objective_values, cmap='viridis', alpha=0.7)
ax.contour(x1_grid, x2_grid, objective_values, levels=20, cmap='viridis')

# Построение области допустимых решений (используя constraint1 и constraint2)
feasible_region = np.zeros_like(objective_values)
feasible_region[constraint1(x1_grid, x2_grid) >= 0] = 1
feasible_region[constraint2(x1_grid, x2_grid) >= 0] = 1

# Наложение области допустимых решений на график
ax.plot_surface(x1_grid, x2_grid, feasible_region, color='gray', alpha=0.5, label='Feasible Region')

# Настройка графика
ax.set_xlabel('X1')
ax.set_ylabel('X2')
ax.set_zlabel('Objective Function')
ax.legend()
plt.title('Objective Function and Feasible Region')

# Поиск минимума с учетом ограничений
min_value = np.min(objective_values[feasible_region == 1])
min_point = np.unravel_index(np.argmin(objective_values), objective_values.shape)
min_x1, min_x2 = x1_values[min_point[1]], x2_values[min_point[0]]

# Вывод точки с минимальным значением функции в области допустимых решений
ax.scatter(min_x1, min_x2, min_value, color='red', s=50, label='Minimum in Feasible Region')
ax.legend()

# Показать график
plt.show()
