import numpy as np

class Neuron:
    def __init__(self, input_size, activation_function='threshold', threshold=0):
        self.weights = np.random.rand(input_size)
        self.bias = np.random.rand()
        self.activation_function = activation_function
        self.threshold = threshold

    def linear_transform(self, inputs):
        return np.dot(inputs, self.weights) + self.bias

    def activate(self, z):
        if self.activation_function == 'threshold':
            return 1 if z >= self.threshold else 0
        elif self.activation_function == 'linear':
            return z
        elif self.activation_function == 'sigmoid':
            return 1 / (1 + np.exp(-z))
        elif self.activation_function == 'tanh':
            return np.tanh(z)
        else:
            raise ValueError("Invalid activation function type")

    def forward(self, inputs):
        z = self.linear_transform(inputs)
        return self.activate(z)

# Создаем нейрон с пороговой функцией
neuron_threshold = Neuron(input_size=3, activation_function='threshold', threshold=2)

# Создаем нейрон с линейной функцией
neuron_linear = Neuron(input_size=3, activation_function='linear')

# Создаем нейрон с сигмоидальной функцией
neuron_sigmoid = Neuron(input_size=3, activation_function='sigmoid')

# Создаем нейрон с гиперболическим тангенсом
neuron_tanh = Neuron(input_size=3, activation_function='tanh')

# Генерируем случайные входные данные
inputs = np.random.rand(3)

# Выводим результаты для каждого нейрона
print(f"Inputs: {inputs}")
print(f"Threshold Neuron Output: {neuron_threshold.forward(inputs)}")
print(f"Linear Neuron Output: {neuron_linear.forward(inputs)}")
print(f"Sigmoid Neuron Output: {neuron_sigmoid.forward(inputs)}")
print(f"Tanh Neuron Output: {neuron_tanh.forward(inputs)}")
